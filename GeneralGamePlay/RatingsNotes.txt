Scoring Systems

Agon Code
import json

dataPoints = []

f = open("matchesFrom2011", 'r')
for line in f.readlines():
  # Load the match data in JSON format.
  match = json.loads(line)['data']
  # Discard matches that aren't signed.
  if not 'matchHostPK' in match:
    continue
  # Discard matches that aren't signed by Tiltyard.
  if hash(match['matchHostPK']) != -859967508381652683:
    continue
  # Discard matches that didn't record player names.
  if not 'playerNamesFromHost' in match:
    continue
  # Discard matches that didn't complete successfully.
  if not match['isCompleted']:
    continue
  # Discard matches where a player had errors.
  if 'errors' in match:
    hasErrors = False
    for errorsForTurn in match['errors']:
      for error in errorsForTurn:
        if len(error) > 0:
          hasErrors = True
    if hasErrors:
      continue
  # Store the relevant parts for computing ratings: when the match started,
  # the players involved, and the final scores.
  dataPoints.append((match['startTime'], match['gameMetaURL'], match['playerNamesFromHost'], match['goalValues']))

# Agon rating, like Elo rating, is order dependant: if a player that's currently weak
# beats a player that's currently strong, that's more important than if a player that
# was once weak (but is now average) beats a player that was once strong (but is now
# also average). Thus we need to process matches in the order in which they occurred.
# This is done by sorting them by start time.
dataPoints.sort()

# Ratings will be tracked in this map.
agonRating = {}

# An essential part of Agon rating, like Elo rating, is determining the expected score
# for players when they're matched against each other, based on their current ratings.
# This is done exactly as it is done in ordinary Elo rating.
def getExpectedScore(aPlayer, bPlayer):
  if not aPlayer in agonRating:
    agonRating[aPlayer] = 0
  if not bPlayer in agonRating:
    agonRating[bPlayer] = 0
  RA = agonRating[aPlayer]
  RB = agonRating[bPlayer]
  QA = pow(10.0, RA / 400.0)
  QB = pow(10.0, RB / 400.0)
  return QA / (QA + QB)

# Updating ratings also works exactly like in Elo rating: compute the expected score,
# and then increase ratings if the players exceeded that score, and decrease ratings
# if the players fell below the expected score.
def updateRating(aPlayer, bPlayer, aScore, bScore):
  if aScore + bScore != 100:
    return
  EA = getExpectedScore(aPlayer, bPlayer)
  EB = 1.0 - EA
  agonRating[aPlayer] = agonRating[aPlayer] + (aScore/100.0 - EA)
  agonRating[bPlayer] = agonRating[bPlayer] + (bScore/100.0 - EB)

# For every recorded match, we do pairwise ratings updates between all of the players
# involved in the match, *and* we do a ratings update between each player in the match
# and their role in the game, representing the roles in the game as distinct players
# with their own ratings that vary just like player ratings.
for dataPoint in dataPoints:
  gameURL = dataPoint[1]
  playerNames = dataPoint[2]
  goalValues = dataPoint[3]
  for i in range(len(goalValues)):
    updateRating(playerNames[i], gameURL + '_role' + str(i), goalValues[i], 100 - goalValues[i])
    for j in range(i+1,len(goalValues)):
      updateRating(playerNames[i], playerNames[j], goalValues[i], goalValues[j])

# Display a list of (rating,player) sorted by rating in ascending order.
ratingsForPlayers = [ (i,j) for (j,i) in agonRating.items() ]
ratingsForPlayers.sort()
for rating, playerName in ratingsForPlayers:
  print str(rating).rjust(20), playerName
  
  
ELO Rating
Performance rating[edit]
p	d_p
1.00	+800
0.99	+677
0.9	+366
0.8	+240
0.7	+149
0.6	+72
0.5	0
0.4	-72
0.3	-149
0.2	-240
0.1	-366
0.01	-677
0.00	-800
Performance rating is a hypothetical rating that would result from the games of a single event only. Some chess organizations use the "algorithm of 400" to calculate performance rating. According to this algorithm, performance rating for an event is calculated by taking (1) the rating of each player beaten and adding 400, (2) the rating of each player lost to and subtracting 400, (3) the rating of each player drawn, and (4) summing these figures and dividing by the number of games played.
Example: 2 Wins, 2 Losses

\textstyle\displaystyle{\frac{\left(w+400+x+400+y-400+z-400\right)}{4}}
\textstyle\displaystyle{\frac{\left[w+x+y+z+400\left(2\right)-400\left(2\right)\right]}{4}}
This can be expressed by the following formula:

\textstyle
\text{Performance rating} = \frac{\text{Total of opponents' ratings } + 400 \times (\text{Wins} - \text{Losses})}{\text{Games}}
Example: If you beat a player with an Elo rating of 1000,

\textstyle
\displaystyle
\text{Performance rating} = \frac{1000 + 400 \times (1)}{1} = 1400
If you beat two players with Elo ratings of 1000,

\textstyle
\displaystyle
\text{Performance rating} = \frac{2000 + 400 \times (2)}{2} = 1400
If you draw,

\textstyle
\displaystyle
\text{Performance rating} = \frac{1000 + 400 \times (0)}{1} = 1000
This is a simplification, because it doesn't take account of K-factors (this factor is explained further below), but it offers an easy way to get an estimate of PR (performance rating).

FIDE, however, calculates performance rating by means of the formula: Opponents' Rating Average + Rating Difference. Rating Difference d_p is based on a player's tournament percentage score p, which is then used as the key in a lookup table where p is simply the number of points scored divided by the number of games played. Note that, in case of a perfect or no score d_p is 800. The full table can be found in the FIDE handbook, B. Permanent Commissions 1.0. Requirements for the titles designated in 0.31, 1.48 online. A simplified version of this table is on the right.

